Type 'django-admin help <subcommand>' for help on a specific subcommand.

Available subcommands:

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runserver
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website>django-admin startproject django_project



(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py startapp blog



----------------------------------------------------------------------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog\django_project>python manage.py runserver
-------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py makemigration
No changes detected


(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py createsuperuser
Username (leave blank to use 'tirthhihoriya'): tirth
Email address: tirth.hihoriya@gmail.com
Password:
Password (again):
The password is too similar to the username.
This password is too short. It must contain at least 8 characters.
Bypass password validation and create user anyway? [y/N]:y
Superuser created successfully.
-------------------------------------------------------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py makemigrations
Migrations for 'blog':
  blog\migrations\0001_initial.py
    - Create model Post


(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py sqlmigrate blog 0001
BEGIN;
--
-- Create model Post
--
CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL, "date_posted" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
COMMIT;


(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, sessions
Running migrations:
  Applying blog.0001_initial... OK
----------------------------------------------------------------------------------------------------------------------------------







----------------------------------------------------------------------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py shell
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Post 
>>> from django.contrib.auth.models import User

>>> User.objects.all()
<QuerySet [<User: tirth>, <User: TestUser>]>
>>> User.objects.first()
<User: tirth>
>>> User.objects.last()
<User: TestUser>
>>> User.objects.filter(username='tirth')
<QuerySet [<User: tirth>]>
>>> User.objects.filter(username='tirth').first()
<User: tirth>

>>> user  =User.objects.filter(username='tirth').first()
>>> user
<User: tirth>
>>> user.id
1
>>> user.pk
1
>>> user = User.objects.get(id=1)
>>> user
<User: tirth>

>>> Post.objects.all()
<QuerySet []>
>>> post_1 = Post(title='BLog 1',content='First post content!!!',author=user)
>>> post_1
<Post: Post object (None)>
>>> Post.objects.all()
<QuerySet []>
>>> post_1.save()
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>
>>> exit()

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py shell
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> Post.objects.all()
<QuerySet [<Post: BLog 1>]>
>>>  user  =User.objects.filter(username='tirth').first()
  File "<console>", line 1
    user  =User.objects.filter(username='tirth').first()
    ^
IndentationError: unexpected indent
>>> user  =User.objects.filter(username='tirth').first()
>>> user
<User: tirth>
>>> post_2 = Post(title='Blog 2',content='Second Post Content!')
>>> post_2
<Post: Blog 2>
>>> post_2 = Post(title='Blog 2',content='Second Post Content!', author_id=user.id)
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: BLog 1>, <Post: Blog 2>]>
>>>
>>> exit()

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py shell
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> Post.objects.all()
<QuerySet [<Post: BLog 1>]>

>>> user  =User.objects.filter(username='tirth').first()
>>> user
<User: tirth>

>>> post_2 = Post(title='Blog 2',content='Second Post Content!')
>>> post_2
<Post: Blog 2>
>>> post_2 = Post(title='Blog 2',content='Second Post Content!', author_id=user.id)
>>> post_2.save()
>>> Post.objects.all()
<QuerySet [<Post: BLog 1>, <Post: Blog 2>]>
>>>

>>> post = Post.object.first()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Post' has no attribute 'object'
>>> post = Post.objects.first()
>>> post.content
'First post content!!!'
>>> post.date_posted
datetime.datetime(2020, 3, 21, 16, 58, 1, 391798, tzinfo=<UTC>)
>>>> post.author
<User: tirth>

>>> post.email
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Post' object has no attribute 'email'

>>> post.author.email
'tirth.hihoriya@gmail.com'

>>> user
<User: tirth>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x03FEEEF8>

 >>> user.post_set.all()
<QuerySet [<Post: BLog 1>, <Post: Blog 2>, <Post: Blog 3>]>

>>> user.post_set.first()
<Post: BLog 1>

# no need to specify author b'cos of `user`
>>> user.post_set.create(title='Blog 3',content='Third Post Content!!')    
<Post: Blog 3>
-------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------- v6 --------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py startapp users






----------------------------------------------------------- v 8 -------------------------------------------------------------------
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py makmigrations
Unknown command: 'makmigrations'. Did you mean makemigrations?
Type 'manage.py help' for usage.

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py makemigrations
Migrations for 'users':
  users\migrations\0001_initial.py
    - Create model Profile

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, sessions, users
Running migrations:
  Applying users.0001_initial... OK

(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

----
(django_env) C:\Users\Tirth Hihoriya\Google Drive\4th Sem\django_blog_website\django_project>python manage.py shell
Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.contrib.auth.models import User
>>> user = User.objects.filter(username='tirth').first()
>>> user
<User: tirth>
>>> user.profile
<Profile: tirth Profile>
>>> user.profile.image
<ImageFieldFile: profile_pics/logo3.jpg>
>>> user.profile.image.width
975
>>> user.profile.image.height
650


>>> user.profile.image.url
'profile_pics/logo3.jpg'
>>> user = User.objects.filter(username='TestUser').first()    # whose image was not uploaded
>>> user.profile.image
<ImageFieldFile: default.jpg>
>>> exit()

----------------------------------------------------------------------------------------------------------------------------------



###########  Pagination  #################
-----------------------------------------------------------  v 11  ----------------------------------------------------------
>>> from django.core.paginator import Paginator
>>> posts = ['1','2','3','4','5']
>>> p= Paginator(posts,2)
>>> p.numpages
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Paginator' object has no attribute 'numpages'
>>> p.num_pages
3
>>> for page in p.page_range:
...     print(page)
...
1
2
3
>>> p1 = p.page(1)
>>> p1
<Page 1 of 3>
>>> p1.number
1
>>> p1.object_list
['1', '2']
>>> p.page(2).object_list
['3', '4']
>>> p1.has_previous()
False
>>> p1.has_next()
True
>>> p1.next_page_number()
2